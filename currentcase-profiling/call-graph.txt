Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 32.82    802.48   802.48     6000     0.13     0.15  UpdateField()
 31.67   1576.77   774.29     6000     0.13     0.25  UpdateTree()
 27.64   2252.45   675.68   978000     0.00     0.00  Species::UpdateSeed()
  2.24   2307.24    54.80 504078704     0.00     0.00  genrand2i()
  1.15   2335.41    28.16     6000     0.00     0.00  UpdateTreefall()
  1.10   2362.30    26.89 960000000     0.00     0.00  Tree::CalcLAI()
  1.08   2388.71    26.40 960000000     0.00     0.00  Tree::Update()
  0.90   2410.66    21.95 960000000     0.00     0.00  Tree::Average()
  0.37   2419.65     8.99 275778354     0.00     0.00  Species::GPPleaf(float, float, float)
  0.32   2427.58     7.93 17584390     0.00     0.00  Tree::Fluxh(int)
  0.10   2429.91     2.33        1     2.33     2.33  sgenrand2i(unsigned long)
  0.09   2432.17     2.26 951897823     0.00     0.00  std::exp(float)
  0.09   2434.37     2.20 551557108     0.00     0.00  std::sqrt(float)
  0.08   2436.41     2.04     6000     0.00     0.00  Average()
  0.06   2437.94     1.53 962079058     0.00     0.00  flor(float)
  0.05   2439.28     1.34 464020018     0.00     0.00  minf(float, float)
  0.05   2440.46     1.19 17584390     0.00     0.00  Species::dailyGPPleaf(float, float, float, float, float)
  0.04   2441.34     0.88 522176960     0.00     0.00  min(int, int)
  0.03   2441.99     0.65  8103360     0.00     0.00  Tree::Growth()
  0.02   2442.45     0.46 29989208     0.00     0.00  genrand2()
  0.02   2442.83     0.38  8100085     0.00     0.00  Tree::DisperseSeed()
  0.01   2443.17     0.34  8318077     0.00     0.00  Species::DeathRate(float, float, int)
  0.01   2443.43     0.26                             Tree::BirthFromData(Species*, int, int, float)
  0.01   2443.69     0.26                             Tree::Couple()
  0.01   2443.90     0.21 87402234     0.00     0.00  max(int, int)
  0.01   2444.10     0.20  4546182     0.00     0.00  Tree::UpdateTreeBiometry()
  0.01   2444.29     0.19  2504880     0.00     0.00  Species::FillSeed(int, int)
  0.01   2444.43     0.14  8103360     0.00     0.00  Tree::UpdateLeafDynamics()
  0.01   2444.56     0.13  2605184     0.00     0.00  std::sin(float)
  0.01   2444.68     0.13  2606346     0.00     0.00  std::cos(float)
  0.00   2444.80     0.12  8103360     0.00     0.00  Tree::FallTree()
  0.00   2444.92     0.12     6000     0.00     0.00  OutputField()
  0.00   2445.04     0.12      163     0.00     0.00  Species::Init(int, std::basic_fstream<char, std::char_traits<char> >&)
  0.00   2445.12     0.08      726     0.00     0.00  maxf(float, float)
  0.00   2445.17     0.05        1     0.05     0.09  AllocMem()
  0.00   2445.21     0.04   640000     0.00     0.00  Tree::histdbh()
  0.00   2445.24     0.03   217992     0.00     0.00  Tree::Birth(Species*, int, int)
  0.00   2445.27     0.03   217805     0.00     0.00  Tree::Death()
  0.00   2445.28     0.01  8100272     0.00     0.00  __gnu_cxx::__promote_2<float, double, __gnu_cxx::__promote<float, std::__is_integer<float>::__value>::__type, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type>::__type std::pow<float, double>(float, double)
  0.00   2445.29     0.01   160000     0.00     0.00  Tree::Tree()
  0.00   2445.30     0.01        1     0.01     0.01  OutputSnapshot(std::basic_fstream<char, std::char_traits<char> >&)
  0.00   2445.31     0.01        1     0.01     0.01  sgenrand2(unsigned long)
  0.00   2445.32     0.01                             Species::DeathRateNDD(float, float, int, float)
  0.00   2445.32     0.01                             std::atan2(float, float)
  0.00   2445.32     0.00   160000     0.00     0.00  Tree::~Tree()
  0.00   2445.32     0.00    12000     0.00     0.00  std::_Iter_base<float*, false>::_S_base(float*)
  0.00   2445.32     0.00    12000     0.00     0.00  std::_Niter_base<float*>::iterator_type std::__niter_base<float*>(float*)
  0.00   2445.32     0.00     6000     0.00     0.41  Evolution()
  0.00   2445.32     0.00     6000     0.00     0.00  void std::fill<float*, double>(float*, float*, double const&)
  0.00   2445.32     0.00     6000     0.00     0.00  __gnu_cxx::__enable_if<std::__is_scalar<double>::__value, void>::__type std::__fill_a<float*, double>(float*, float*, double const&)
  0.00   2445.32     0.00      815     0.00     0.00  std::log10(float)
  0.00   2445.32     0.00      326     0.00     0.00  __gnu_cxx::__promote_2<double, float, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<float, std::__is_integer<float>::__value>::__type>::__type std::pow<double, float>(double, float)
  0.00   2445.32     0.00      164     0.00     0.00  Species::Species()
  0.00   2445.32     0.00      164     0.00     0.00  Species::~Species()
  0.00   2445.32     0.00      163     0.00     0.00  __gnu_cxx::__promote_2<int, double, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type>::__type std::pow<int, double>(int, double)
  0.00   2445.32     0.00        1     0.00     0.00  _GLOBAL__sub_I_buffer
  0.00   2445.32     0.00        1     0.00     0.17  Initialise()
  0.00   2445.32     0.00        1     0.00     0.00  __static_initialization_and_destruction_0(int, int)
  0.00   2445.32     0.00        1     0.00     0.00  FreeMem()
  0.00   2445.32     0.00        1     0.00     0.00  BirthInit()

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2016 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 2 byte(s) for 0.00% of 2445.32 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00 2444.79                 main [1]
                0.00 2442.18    6000/6000        Evolution() [2]
                2.33    0.00       1/1           sgenrand2i(unsigned long) [16]
                0.00    0.17       1/1           Initialise() [31]
                0.05    0.04       1/1           AllocMem() [37]
                0.01    0.00       1/1           sgenrand2(unsigned long) [45]
                0.01    0.00       1/1           OutputSnapshot(std::basic_fstream<char, std::char_traits<char> >&) [44]
                0.00    0.00    6000/962079058     flor(float) [19]
                0.00    0.00       3/29989208     genrand2() [23]
                0.00    0.00       1/1           BirthInit() [67]
                0.00    0.00       1/1           FreeMem() [66]
-----------------------------------------------
                0.00 2442.18    6000/6000        main [1]
[2]     99.9    0.00 2442.18    6000         Evolution() [2]
              774.29  729.98    6000/6000        UpdateTree() [3]
              802.48   82.85    6000/6000        UpdateField() [4]
               28.16    0.25    6000/6000        UpdateTreefall() [8]
                2.04   21.96    6000/6000        Average() [10]
                0.12    0.04    6000/6000        OutputField() [32]
-----------------------------------------------
              774.29  729.98    6000/6000        Evolution() [2]
[3]     61.5  774.29  729.98    6000         UpdateTree() [3]
              675.68    0.00  978000/978000      Species::UpdateSeed() [5]
               26.40   24.09 960000000/960000000     Tree::Update() [7]
                2.26    0.00 951897423/951897823     std::exp(float) [17]
                1.51    0.00 951897423/962079058     flor(float) [19]
                0.03    0.01  217992/217992      Tree::Birth(Species*, int, int) [40]
-----------------------------------------------
              802.48   82.85    6000/6000        Evolution() [2]
[4]     36.2  802.48   82.85    6000         UpdateField() [4]
               54.80    0.00 504078704/504078704     genrand2i() [6]
               26.89    0.26 960000000/960000000     Tree::CalcLAI() [9]
                0.38    0.52 8100085/8100085     Tree::DisperseSeed() [21]
                0.00    0.00    6000/6000        void std::fill<float*, double>(float*, float*, double const&) [57]
-----------------------------------------------
              675.68    0.00  978000/978000      UpdateTree() [3]
[5]     27.6  675.68    0.00  978000         Species::UpdateSeed() [5]
-----------------------------------------------
               54.80    0.00 504078704/504078704     UpdateField() [4]
[6]      2.2   54.80    0.00 504078704         genrand2i() [6]
-----------------------------------------------
               26.40   24.09 960000000/960000000     UpdateTree() [3]
[7]      2.1   26.40   24.09 960000000         Tree::Update() [7]
                0.65   22.82 8103360/8103360     Tree::Growth() [11]
                0.34    0.00 8318077/8318077     Species::DeathRate(float, float, int) [24]
                0.25    0.00 16437013/29989208     genrand2() [23]
                0.03    0.00  214717/217805      Tree::Death() [41]
-----------------------------------------------
               28.16    0.25    6000/6000        Evolution() [2]
[8]      1.2   28.16    0.25    6000         UpdateTreefall() [8]
                0.12    0.13 8103360/8103360     Tree::FallTree() [27]
-----------------------------------------------
               26.89    0.26 960000000/960000000     UpdateField() [4]
[9]      1.1   26.89    0.26 960000000         Tree::CalcLAI() [9]
                0.19    0.00 114017730/522176960     min(int, int) [22]
                0.07    0.00 27051979/87402234     max(int, int) [28]
-----------------------------------------------
                2.04   21.96    6000/6000        Evolution() [2]
[10]     1.0    2.04   21.96    6000         Average() [10]
               21.95    0.01 960000000/960000000     Tree::Average() [12]
-----------------------------------------------
                0.65   22.82 8103360/8103360     Tree::Update() [7]
[11]     1.0    0.65   22.82 8103360         Tree::Growth() [11]
                1.19   11.98 17584390/17584390     Species::dailyGPPleaf(float, float, float, float, float) [13]
                7.93    1.38 17584390/17584390     Tree::Fluxh(int) [15]
                0.20    0.01 4546182/4546182     Tree::UpdateTreeBiometry() [29]
                0.14    0.00 8103360/8103360     Tree::UpdateLeafDynamics() [33]
-----------------------------------------------
               21.95    0.01 960000000/960000000     Average() [10]
[12]     0.9   21.95    0.01 960000000         Tree::Average() [12]
                0.01    0.00 8100272/8100272     __gnu_cxx::__promote_2<float, double, __gnu_cxx::__promote<float, std::__is_integer<float>::__value>::__type, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type>::__type std::pow<float, double>(float, double) [42]
-----------------------------------------------
                1.19   11.98 17584390/17584390     Tree::Growth() [11]
[13]     0.5    1.19   11.98 17584390         Species::dailyGPPleaf(float, float, float, float, float) [13]
                8.99    3.00 275778354/275778354     Species::GPPleaf(float, float, float) [14]
-----------------------------------------------
                8.99    3.00 275778354/275778354     Species::dailyGPPleaf(float, float, float, float, float) [13]
[14]     0.5    8.99    3.00 275778354         Species::GPPleaf(float, float, float) [14]
                2.20    0.00 551556708/551557108     std::sqrt(float) [18]
                0.80    0.00 275778354/464020018     minf(float, float) [20]
-----------------------------------------------
                7.93    1.38 17584390/17584390     Tree::Growth() [11]
[15]     0.4    7.93    1.38 17584390         Tree::Fluxh(int) [15]
                0.69    0.00 408121975/522176960     min(int, int) [22]
                0.54    0.00 188240938/464020018     minf(float, float) [20]
                0.15    0.00 60347004/87402234     max(int, int) [28]
-----------------------------------------------
                2.33    0.00       1/1           main [1]
[16]     0.1    2.33    0.00       1         sgenrand2i(unsigned long) [16]
-----------------------------------------------
                0.00    0.00     400/951897823     Initialise() [31]
                2.26    0.00 951897423/951897823     UpdateTree() [3]
[17]     0.1    2.26    0.00 951897823         std::exp(float) [17]
-----------------------------------------------
                0.00    0.00     400/551557108     Initialise() [31]
                2.20    0.00 551556708/551557108     Species::GPPleaf(float, float, float) [14]
[18]     0.1    2.20    0.00 551557108         std::sqrt(float) [18]
-----------------------------------------------
                0.00    0.00    6000/962079058     main [1]
                0.00    0.00   98378/962079058     Tree::FallTree() [27]
                0.00    0.00  435984/962079058     Tree::Birth(Species*, int, int) [40]
                0.01    0.00 4631513/962079058     Tree::UpdateTreeBiometry() [29]
                0.01    0.00 5009760/962079058     Tree::DisperseSeed() [21]
                1.51    0.00 951897423/962079058     UpdateTree() [3]
[19]     0.1    1.53    0.00 962079058         flor(float) [19]
-----------------------------------------------
                0.00    0.00     326/464020018     Species::Init(int, std::basic_fstream<char, std::char_traits<char> >&) [36]
                0.00    0.00     400/464020018     Initialise() [31]
                0.54    0.00 188240938/464020018     Tree::Fluxh(int) [15]
                0.80    0.00 275778354/464020018     Species::GPPleaf(float, float, float) [14]
[20]     0.1    1.34    0.00 464020018         minf(float, float) [20]
-----------------------------------------------
                0.38    0.52 8100085/8100085     UpdateField() [4]
[21]     0.0    0.38    0.52 8100085         Tree::DisperseSeed() [21]
                0.19    0.00 2504880/2504880     Species::FillSeed(int, int) [30]
                0.13    0.00 2504880/2605184     std::sin(float) [34]
                0.12    0.00 2504880/2606346     std::cos(float) [35]
                0.08    0.00 5009760/29989208     genrand2() [23]
                0.01    0.00 5009760/962079058     flor(float) [19]
-----------------------------------------------
                0.00    0.00   37255/522176960     Tree::FallTree() [27]
                0.19    0.00 114017730/522176960     Tree::CalcLAI() [9]
                0.69    0.00 408121975/522176960     Tree::Fluxh(int) [15]
[22]     0.0    0.88    0.00 522176960         min(int, int) [22]
-----------------------------------------------
                0.00    0.00       3/29989208     main [1]
                0.01    0.00  435984/29989208     Tree::Birth(Species*, int, int) [40]
                0.08    0.00 5009760/29989208     Tree::DisperseSeed() [21]
                0.12    0.00 8106448/29989208     Tree::FallTree() [27]
                0.25    0.00 16437013/29989208     Tree::Update() [7]
[23]     0.0    0.46    0.00 29989208         genrand2() [23]
-----------------------------------------------
                0.34    0.00 8318077/8318077     Tree::Update() [7]
[24]     0.0    0.34    0.00 8318077         Species::DeathRate(float, float, int) [24]
-----------------------------------------------
                                                 <spontaneous>
[25]     0.0    0.26    0.00                 Tree::BirthFromData(Species*, int, int, float) [25]
-----------------------------------------------
                                                 <spontaneous>
[26]     0.0    0.26    0.00                 Tree::Couple() [26]
-----------------------------------------------
                0.12    0.13 8103360/8103360     UpdateTreefall() [8]
[27]     0.0    0.12    0.13 8103360         Tree::FallTree() [27]
                0.12    0.00 8106448/29989208     genrand2() [23]
                0.01    0.00  100304/2605184     std::sin(float) [34]
                0.00    0.00  101466/2606346     std::cos(float) [35]
                0.00    0.00    3088/217805      Tree::Death() [41]
                0.00    0.00   98378/962079058     flor(float) [19]
                0.00    0.00   37255/522176960     min(int, int) [22]
                0.00    0.00    3088/87402234     max(int, int) [28]
-----------------------------------------------
                0.00    0.00     163/87402234     AllocMem() [37]
                0.00    0.00    3088/87402234     Tree::FallTree() [27]
                0.07    0.00 27051979/87402234     Tree::CalcLAI() [9]
                0.15    0.00 60347004/87402234     Tree::Fluxh(int) [15]
[28]     0.0    0.21    0.00 87402234         max(int, int) [28]
-----------------------------------------------
                0.20    0.01 4546182/4546182     Tree::Growth() [11]
[29]     0.0    0.20    0.01 4546182         Tree::UpdateTreeBiometry() [29]
                0.01    0.00 4631513/962079058     flor(float) [19]
-----------------------------------------------
                0.19    0.00 2504880/2504880     Tree::DisperseSeed() [21]
[30]     0.0    0.19    0.00 2504880         Species::FillSeed(int, int) [30]
-----------------------------------------------
                0.00    0.17       1/1           main [1]
[31]     0.0    0.00    0.17       1         Initialise() [31]
                0.12    0.00     163/163         Species::Init(int, std::basic_fstream<char, std::char_traits<char> >&) [36]
                0.04    0.00     400/726         maxf(float, float) [38]
                0.01    0.00  160000/160000      Tree::Tree() [43]
                0.00    0.00     400/551557108     std::sqrt(float) [18]
                0.00    0.00     400/464020018     minf(float, float) [20]
                0.00    0.00     400/951897823     std::exp(float) [17]
                0.00    0.00     164/164         Species::Species() [61]
-----------------------------------------------
                0.12    0.04    6000/6000        Evolution() [2]
[32]     0.0    0.12    0.04    6000         OutputField() [32]
                0.04    0.00  640000/640000      Tree::histdbh() [39]
-----------------------------------------------
                0.14    0.00 8103360/8103360     Tree::Growth() [11]
[33]     0.0    0.14    0.00 8103360         Tree::UpdateLeafDynamics() [33]
-----------------------------------------------
                0.01    0.00  100304/2605184     Tree::FallTree() [27]
                0.13    0.00 2504880/2605184     Tree::DisperseSeed() [21]
[34]     0.0    0.13    0.00 2605184         std::sin(float) [34]
-----------------------------------------------
                0.00    0.00  101466/2606346     Tree::FallTree() [27]
                0.12    0.00 2504880/2606346     Tree::DisperseSeed() [21]
[35]     0.0    0.13    0.00 2606346         std::cos(float) [35]
-----------------------------------------------
                0.12    0.00     163/163         Initialise() [31]
[36]     0.0    0.12    0.00     163         Species::Init(int, std::basic_fstream<char, std::char_traits<char> >&) [36]
                0.00    0.00     326/464020018     minf(float, float) [20]
                0.00    0.00     815/815         std::log10(float) [59]
                0.00    0.00     326/326         __gnu_cxx::__promote_2<double, float, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<float, std::__is_integer<float>::__value>::__type>::__type std::pow<double, float>(double, float) [60]
                0.00    0.00     163/163         __gnu_cxx::__promote_2<int, double, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type>::__type std::pow<int, double>(int, double) [63]
-----------------------------------------------
                0.05    0.04       1/1           main [1]
[37]     0.0    0.05    0.04       1         AllocMem() [37]
                0.04    0.00     326/726         maxf(float, float) [38]
                0.00    0.00     163/87402234     max(int, int) [28]
-----------------------------------------------
                0.04    0.00     326/726         AllocMem() [37]
                0.04    0.00     400/726         Initialise() [31]
[38]     0.0    0.08    0.00     726         maxf(float, float) [38]
-----------------------------------------------
                0.04    0.00  640000/640000      OutputField() [32]
[39]     0.0    0.04    0.00  640000         Tree::histdbh() [39]
-----------------------------------------------
                0.03    0.01  217992/217992      UpdateTree() [3]
[40]     0.0    0.03    0.01  217992         Tree::Birth(Species*, int, int) [40]
                0.01    0.00  435984/29989208     genrand2() [23]
                0.00    0.00  435984/962079058     flor(float) [19]
-----------------------------------------------
                0.00    0.00    3088/217805      Tree::FallTree() [27]
                0.03    0.00  214717/217805      Tree::Update() [7]
[41]     0.0    0.03    0.00  217805         Tree::Death() [41]
-----------------------------------------------
                0.01    0.00 8100272/8100272     Tree::Average() [12]
[42]     0.0    0.01    0.00 8100272         __gnu_cxx::__promote_2<float, double, __gnu_cxx::__promote<float, std::__is_integer<float>::__value>::__type, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type>::__type std::pow<float, double>(float, double) [42]
-----------------------------------------------
                0.01    0.00  160000/160000      Initialise() [31]
[43]     0.0    0.01    0.00  160000         Tree::Tree() [43]
-----------------------------------------------
                0.01    0.00       1/1           main [1]
[44]     0.0    0.01    0.00       1         OutputSnapshot(std::basic_fstream<char, std::char_traits<char> >&) [44]
-----------------------------------------------
                0.01    0.00       1/1           main [1]
[45]     0.0    0.01    0.00       1         sgenrand2(unsigned long) [45]
-----------------------------------------------
                                                 <spontaneous>
[46]     0.0    0.01    0.00                 Species::DeathRateNDD(float, float, int, float) [46]
-----------------------------------------------
                                                 <spontaneous>
[47]     0.0    0.01    0.00                 std::atan2(float, float) [47]
-----------------------------------------------
                0.00    0.00  160000/160000      FreeMem() [66]
[54]     0.0    0.00    0.00  160000         Tree::~Tree() [54]
-----------------------------------------------
                0.00    0.00   12000/12000       std::_Niter_base<float*>::iterator_type std::__niter_base<float*>(float*) [56]
[55]     0.0    0.00    0.00   12000         std::_Iter_base<float*, false>::_S_base(float*) [55]
-----------------------------------------------
                0.00    0.00   12000/12000       void std::fill<float*, double>(float*, float*, double const&) [57]
[56]     0.0    0.00    0.00   12000         std::_Niter_base<float*>::iterator_type std::__niter_base<float*>(float*) [56]
                0.00    0.00   12000/12000       std::_Iter_base<float*, false>::_S_base(float*) [55]
-----------------------------------------------
                0.00    0.00    6000/6000        UpdateField() [4]
[57]     0.0    0.00    0.00    6000         void std::fill<float*, double>(float*, float*, double const&) [57]
                0.00    0.00   12000/12000       std::_Niter_base<float*>::iterator_type std::__niter_base<float*>(float*) [56]
                0.00    0.00    6000/6000        __gnu_cxx::__enable_if<std::__is_scalar<double>::__value, void>::__type std::__fill_a<float*, double>(float*, float*, double const&) [58]
-----------------------------------------------
                0.00    0.00    6000/6000        void std::fill<float*, double>(float*, float*, double const&) [57]
[58]     0.0    0.00    0.00    6000         __gnu_cxx::__enable_if<std::__is_scalar<double>::__value, void>::__type std::__fill_a<float*, double>(float*, float*, double const&) [58]
-----------------------------------------------
                0.00    0.00     815/815         Species::Init(int, std::basic_fstream<char, std::char_traits<char> >&) [36]
[59]     0.0    0.00    0.00     815         std::log10(float) [59]
-----------------------------------------------
                0.00    0.00     326/326         Species::Init(int, std::basic_fstream<char, std::char_traits<char> >&) [36]
[60]     0.0    0.00    0.00     326         __gnu_cxx::__promote_2<double, float, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<float, std::__is_integer<float>::__value>::__type>::__type std::pow<double, float>(double, float) [60]
-----------------------------------------------
                0.00    0.00     164/164         Initialise() [31]
[61]     0.0    0.00    0.00     164         Species::Species() [61]
-----------------------------------------------
                0.00    0.00     164/164         FreeMem() [66]
[62]     0.0    0.00    0.00     164         Species::~Species() [62]
-----------------------------------------------
                0.00    0.00     163/163         Species::Init(int, std::basic_fstream<char, std::char_traits<char> >&) [36]
[63]     0.0    0.00    0.00     163         __gnu_cxx::__promote_2<int, double, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type>::__type std::pow<int, double>(int, double) [63]
-----------------------------------------------
                0.00    0.00       1/1           __libc_csu_init [84]
[64]     0.0    0.00    0.00       1         _GLOBAL__sub_I_buffer [64]
                0.00    0.00       1/1           __static_initialization_and_destruction_0(int, int) [65]
-----------------------------------------------
                0.00    0.00       1/1           _GLOBAL__sub_I_buffer [64]
[65]     0.0    0.00    0.00       1         __static_initialization_and_destruction_0(int, int) [65]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[66]     0.0    0.00    0.00       1         FreeMem() [66]
                0.00    0.00  160000/160000      Tree::~Tree() [54]
                0.00    0.00     164/164         Species::~Species() [62]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[67]     0.0    0.00    0.00       1         BirthInit() [67]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2016 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

  [64] _GLOBAL__sub_I_buffer (troll.cpp) [6] genrand2i()  [13] Species::dailyGPPleaf(float, float, float, float, float)
  [31] Initialise()           [45] sgenrand2(unsigned long) [36] Species::Init(int, std::basic_fstream<char, std::char_traits<char> >&)
   [3] UpdateTree()           [21] Tree::DisperseSeed()   [14] Species::GPPleaf(float, float, float)
  [16] sgenrand2i(unsigned long) [25] Tree::BirthFromData(Species*, int, int, float) [30] Species::FillSeed(int, int)
  [32] OutputField()          [33] Tree::UpdateLeafDynamics() [24] Species::DeathRate(float, float, int)
   [4] UpdateField()          [29] Tree::UpdateTreeBiometry() [61] Species::Species()
  [44] OutputSnapshot(std::basic_fstream<char, std::char_traits<char> >&) [40] Tree::Birth(Species*, int, int) [62] Species::~Species()
   [8] UpdateTreefall()       [41] Tree::Death()          [55] std::_Iter_base<float*, false>::_S_base(float*)
  [28] max(int, int)          [15] Tree::Fluxh(int)       [56] std::_Niter_base<float*>::iterator_type std::__niter_base<float*>(float*)
  [22] min(int, int)          [26] Tree::Couple()         [35] std::cos(float)
  [65] __static_initialization_and_destruction_0(int, int) (troll.cpp) [11] Tree::Growth() [17] std::exp(float)
  [19] flor(float)             [7] Tree::Update()         [60] __gnu_cxx::__promote_2<double, float, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type, __gnu_cxx::__promote<float, std::__is_integer<float>::__value>::__type>::__type std::pow<double, float>(double, float)
  [38] maxf(float, float)     [12] Tree::Average()        [42] __gnu_cxx::__promote_2<float, double, __gnu_cxx::__promote<float, std::__is_integer<float>::__value>::__type, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type>::__type std::pow<float, double>(float, double)
  [20] minf(float, float)      [9] Tree::CalcLAI()        [63] __gnu_cxx::__promote_2<int, double, __gnu_cxx::__promote<int, std::__is_integer<int>::__value>::__type, __gnu_cxx::__promote<double, std::__is_integer<double>::__value>::__type>::__type std::pow<int, double>(int, double)
  [10] Average()              [39] Tree::histdbh()        [34] std::sin(float)
  [66] FreeMem()              [27] Tree::FallTree()       [57] void std::fill<float*, double>(float*, float*, double const&)
  [37] AllocMem()             [43] Tree::Tree()           [18] std::sqrt(float)
  [23] genrand2()             [54] Tree::~Tree()          [47] std::atan2(float, float)
  [67] BirthInit()             [5] Species::UpdateSeed()  [59] std::log10(float)
   [2] Evolution()            [46] Species::DeathRateNDD(float, float, int, float) [58] __gnu_cxx::__enable_if<std::__is_scalar<double>::__value, void>::__type std::__fill_a<float*, double>(float*, float*, double const&)
